[gd_scene load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Camera2D

export var ro_decay = 0.8
export var max_delta = Vector2(30, 15)
export var max_roll = 0.05
export (NodePath) var target
export (float, 0.05, 0.9) var follow_rate = 0.1

export var trauma_pow = 2.0
export var max_gun_trauma = 0.5
onready var trauma = 0.0

onready var noise = OpenSimplexNoise.new()
var noise_y = 0
export var noise_period = 4.0
export var noise_octaves = 2.0

export var max_lead = 100.0
export var lead_dist = 50.0

func _ready():
	if (!GLOBAL.camera):
		GLOBAL.camera = self
	randomize()
	noise.seed = randi()
	noise.period = noise_period
	noise.octaves = noise_octaves
	
func is_gun_trauma_maxed():
	return trauma > max_gun_trauma
	
func add_trauma(t):
	self.trauma = min(self.trauma + t, 1.0)
	
func _process(delta):
	if (target):
		var to_mouse = get_global_mouse_position() - get_node(target).global_position
		var dist_forward = smoothstep(0.0, max_lead, to_mouse.length() - lead_dist)
		var target_pos = (get_node(target).global_position + get_global_mouse_position()) * 0.5
		target_pos = get_node(target).global_position + to_mouse.normalized() * dist_forward * max_lead
		global_position = lerp(global_position, target_pos, follow_rate * zoom.x)
		
	if (self.trauma):
		self.trauma = max(self.trauma-ro_decay*delta, 0.0)
		shake()
		
	# If player is left clicking, increase screen view
	# Otherwise, zoom should be proportional to vel.

func update_zoom(val):
	zoom = Vector2(0.5 + val,0.5 + val)
	
func shake():
	var amount = pow(self.trauma, trauma_pow)
	noise_y += 1
	rotation = max_roll * amount * noise.get_noise_2d(noise.seed, noise_y)
	offset.x = max_delta.x * amount * noise.get_noise_2d(noise.seed*2, noise_y)
	offset.y = max_delta.y * amount * noise.get_noise_2d(noise.seed*3, noise_y)
"

[node name="ShakyCamera" type="Camera2D"]
current = true
zoom = Vector2( 0.5, 0.5 )
editor_draw_limits = true
editor_draw_drag_margin = true
script = SubResource( 1 )
